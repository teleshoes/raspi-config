#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);

sub install($$$$$);
sub runIpmagic($@);
sub run(@);

my $IPMAGIC_NAME = "raspi";
my $USER = "pi";

my $REMOTE_SRC_DIR = "/home/$USER/Code";
my $LOCAL_CACHE_DIR = "$ENV{HOME}/Code/raspi/backup/install-src-cache";

my @INSTALLS_ARR = (
  qtbigtext => ["GIT", "https://github.com/teleshoes/qtbigtext", ""
    . "./install.pl"
  ],

  net       => ["GIT", "https://github.com/teleshoes/net", ""
    . "./install.pl"
  ],

  klomp     => ["GIT", "https://github.com/teleshoes/klomp", ""
    . "./install.pl /usr && ./dependency-install.pl"
  ],

  iguanair  => ["GIT", "https://github.com/iguanaworks/iguanair", ""
    . "echo install iguanair"
    . " && sudo apt-get install cmake libusb-1.0-0-dev swig"
    . " && cd $REMOTE_SRC_DIR/iguanair/software/usb_ir"
    . " && cmake ."
    . " && make"
    . " && sudo make install"
  ],

  wiringpi  => ["GIT", "https://github.com/WiringPi/WiringPi", ""
    . "rm -f debian-template/wiringpi*.deb"
    . " && ./build debian"
    . " && sudo dpkg -i debian-template/wiringpi*.deb"
  ],

  cavestory => ["GIT", "https://github.com/nxengine/nxengine-evo", ""
    . "sudo apt-get install libsdl2-dev libsdl2-mixer-dev libsdl2-image-dev"
    . "                     libjpeg-dev libpng-dev ninja-build"
    . " && mkdir -p build"
    . " && cd build"
    . " && cmake -DCMAKE_BUILD_TYPE=Release .."
    . " && make -j8"
    . " && if [ -d data ]; then"
    . "      echo skipping nxextract"
    . "      ;"
    . "    else"
    . "      wget https://www.cavestory.org/downloads/cavestoryen.zip"
    . "      && unzip cavestoryen.zip"
    . "      && cp -r CaveStory/Doukutsu.exe CaveStory/data ./"
    . "      && ./nxextract"
    . "      ;"
    . "    fi"
    . " && sudo make install"
    . " && sudo rsync -avP ./data/ /usr/local/share/nxengine/data/"
  ],
);

my %INSTALLS_BY_NAME = @INSTALLS_ARR;

my @INSTALL_NAMES = map {$INSTALLS_ARR[$_]} grep {$_ % 2 == 0} (0..$#INSTALLS_ARR);
my %TYPES = map {$_ => ${$INSTALLS_BY_NAME{$_}}[0]} @INSTALL_NAMES;
my %URLS = map {$_ => ${$INSTALLS_BY_NAME{$_}}[1]} @INSTALL_NAMES;
my %CMDS = map {$_ => ${$INSTALLS_BY_NAME{$_}}[2]} @INSTALL_NAMES;

my $PROJECT_FMT = join '', map {sprintf "    %-20s => %s\n", $_, $URLS{$_}} @INSTALL_NAMES;

my $EXEC = basename $0;

my $USAGE = "Usage:
  $EXEC -h | --help
    show this message

  $EXEC [OPTS] [NAME NAME ..]
    install named projects from URLs
    if no projects are named, default is to install all
      -if local dir $LOCAL_CACHE_DIR/NAME exists, run:
        ipmagic $IPMAGIC_NAME --rsync -avP --del \\
          :$REMOTE_SRC_DIR/NAME \\
          $LOCAL_CACHE_DIR/NAME
      -if remote dir $REMOTE_SRC_DIR/NAME does not exist:
        -fetch source code and place in $REMOTE_SRC_DIR
      -run custom install script remotely in $REMOTE_SRC_DIR

  NAME => URL:\n"
    . $PROJECT_FMT . "
  OPTS
";

my $MODE_INSTALL = "install";

sub main(@){
  my @names;
  my $mode = $MODE_INSTALL;
  my $opts = {
  };
  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif(defined $INSTALLS_BY_NAME{$arg}){
      push @names, $arg;
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  @names = @INSTALL_NAMES if @names == 0;

  for my $name(@names){
    if($mode eq $MODE_INSTALL){
      install $opts, $name, $TYPES{$name}, $URLS{$name}, $CMDS{$name};
    }else{
      die "ERROR: unknown mode $mode\n";
    }
  }
}

sub install($$$$$){
  my ($opts, $projectName, $type, $url, $cmd) = @_;
  print "\n\n\ninstalling $projectName\n";
  if(-d "$LOCAL_CACHE_DIR/$projectName"){
    runIpmagic $USER, "--rsync",
      "-avP",
      "--mkpath",
      "--del",
      "$LOCAL_CACHE_DIR/$projectName/",
      ":$REMOTE_SRC_DIR/$projectName/",
    ;
  }else{
    if($type eq "GIT"){
      runIpmagic $USER, "-s", ""
        . " set -x"
        . " && rm -rf $REMOTE_SRC_DIR/$projectName"
        . " && mkdir -p $REMOTE_SRC_DIR"
        . " && git clone $url $REMOTE_SRC_DIR/$projectName"
      ;
    }elsif($type eq "TAR"){
      my $nowMillis = nowMillis();
      my $tmpTar = "/tmp/install-src-$IPMAGIC_NAME-$projectName-$nowMillis-tarfile";
      runIpmagic $USER, "-s", ""
        . " set -x"
        . " && rm -rf $REMOTE_SRC_DIR/$projectName"
        . " && mkdir -p $REMOTE_SRC_DIR/$projectName"
        . " && curl '$url' -o $tmpTar"
        . " && tar -xf $tmpTar --directory $REMOTE_SRC_DIR/$projectName"
        . " && rm $tmpTar"
      ;
    }else{
      die "ERROR: unknown project type $type\n";
    }
  }

  runIpmagic $USER, "-s", ""
    . " set -x"
    . " && cd $REMOTE_SRC_DIR/$projectName"
    . " && echo -ne \"=====\\n=====\\n=====\\n\""
    . " && $cmd"
  ;
}

sub runIpmagic($@){
  my ($user, @args) = @_;
  run "ipmagic", "--sshc", $IPMAGIC_NAME, "-u", $user, @args;
}

sub run(@){
  print "@_\n";
  system @_;
  if($? != 0){
    die "ERROR: cmd '@_' failed\n";
  }
}

&main(@ARGV);

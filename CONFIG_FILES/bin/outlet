#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(sleep);

my $stateFilePrefix = "$ENV{HOME}/.outlet";
my $logFile = "$ENV{HOME}/.outlet-log";

sub readState($);
sub writeState($$);
sub togglePin($$);
sub writePin($$);
sub run(@);

#[on, off]
my $outletPins = {
  1 => [6, 4],
  2 => [10, 1],
  3 => [11, 5],
};

my @allPins = map {@$_} values %$outletPins;
my @onPins = map {$$_[1]} values %$outletPins;
my @offPins = map {$$_[0]} values %$outletPins;

my $okOutlets = join "|", sort keys %$outletPins;
my $okCmds = join "|", qw(on off toggle);

my $delay = 0.3;

my $usage = "Usage:
  $0 [OPTS] [OUTLET] [CMD]
     turn off one pin, and briefly turn on and then turn off the other
     wait $delay seconds between turning the pin on and off

     OUTLET is one of: [$okOutlets]   {default is 1}
     CMD is one of: [$okCmds]   {default is toggle}

     OPTS:
       --wait
         instead of sleeping for $delay seconds, wait until user presses enter
  $0 --clear
";

sub main(@){
  my $waitForStdin = 0;

  if(@_ > 0 and $_[0] =~ /^(--wait)$/){
    shift;
    $waitForStdin = 1;
  }

  if(@_ == 1 and $_[0] =~ /^(--clear)$/){
    writePin $_, 0 foreach @allPins;
    togglePin $_, $waitForStdin foreach @offPins;
    writeState $_, 'off' foreach keys %$outletPins;
    exit 0;
  }

  my $outlet = 1;
  if(@_ > 0 and $_[0] =~ /^($okOutlets)$/){
    $outlet = shift;
  }

  my $cmd = "toggle";
  if(@_ > 0 and $_[0] =~ /^($okCmds)$/){
    $cmd = shift;
  }

  die $usage if @_ != 0;

  my $onPin = $$outletPins{$outlet}[0];
  my $offPin = $$outletPins{$outlet}[1];

  die $usage if @_ > 0;

  if($cmd =~ /^(toggle)$/){
    my $state = readState($outlet);
    if(defined $state and $state =~ /off/){
      $cmd = "on";
    }else{
      $cmd = "off";
    }
  }

  if($cmd =~ /^(on)$/){
    writePin $offPin, 0;
    togglePin $onPin, $waitForStdin;
    writeState $outlet, 'on';
  }elsif($cmd =~ /^(off)$/){
    writePin $onPin, 0;
    togglePin $offPin, $waitForStdin;
    writeState $outlet, 'off';
  }else{
    die $usage;
  }
}

sub readState($){
  my ($outlet) = @_;
  my $stateFile = "$stateFilePrefix-$outlet";
  return undef if not -f $stateFile;
  open FH, "< $stateFile" or die "Could not read $stateFile\n";
  my $state = <FH>;
  close FH;
  return 'on' if $state =~ /on/i;
  return 'off' if $state =~ /off/i;
  return undef;
}
sub writeState($$){
  my ($outlet, $state) = @_;
  my $stateFile = "$stateFilePrefix-$outlet";
  open FH, "> $stateFile" or die "Could not write to stateFile\n";
  if($state =~ /on/i){
    print FH "on\n";
  }elsif($state =~ /off/i){
    print FH "off\n";
  }
  close FH;

  my $d = `date`;
  chomp $d;
  open FH, ">> $logFile" or die "Could not write to $logFile\n";
  print FH "$outlet => $state  $d\n";
  close FH;
}

sub togglePin($$){
  my ($pin, $waitForStdin) = @_;
  writePin $pin, 1;
  if($waitForStdin){
    $| = 1;
    print "press enter to continue";
    <STDIN>;
  }else{
    sleep $delay;
  }
  writePin $pin, 0;
}

sub writePin($$){
  my ($pin, $val) = @_;
  run "gpio", "mode", $pin, "out";
  run "gpio", "write", $pin, $val;
}

sub run(@){
  print "@_\n";
  system @_;
}

&main(@ARGV);

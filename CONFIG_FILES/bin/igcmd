#!/usr/bin/perl
use strict;
use warnings;

sub getRemoteNames();
sub getButtons($);
sub getDefaultChannel($);
sub getDefaultDevice($);
sub formatChannelHexSum($);
sub formatLayout($);
sub run(@);
sub bashComplete($$);

my $igclientExec = "/usr/bin/igclient";
my $dir = "$ENV{HOME}/.config/iguana";
my $repeatSleepMillis = 100;

my @remoteNames = sort `ls $dir/names 2>/dev/null`;
chomp foreach @remoteNames;
my $okRemoteNames = join "|", @remoteNames;

my %buttons = map {$_ => [getButtons $_]} @remoteNames;
my $buttonLayoutFmt = join "\n", map {formatLayout $_} @remoteNames;

my $usage = "Usage:
  $0 -h|--help
    show this message

  $0 [OPTIONS] [CMD CMD ..]

  CMD = <REMOTE>-<BUTTON> | <REMOTE>-<BUTTON>-<REPEAT> | sleep-<SLEEP_MILLIS>
    a remote, button, and optional repeat, separated with '-'
    e.g.:
      tv-channel_up-10   => button \"channel_up\" on remote \"tv\" ten times

  REMOTE:
    one of $okRemoteNames

  BUTTON:
    button name for a given REMOTE
    buttons are alphanumeric plus underscore (dashes are not allowed)

    button IR codes are in:
      $dir/names/<REMOTE>/buttons/
    button layout is in:
      $dir/names/<REMOTE>/layout
    remote default channel is in:
      $dir/names/<REMOTE>/channel-default

    layouts:\n$buttonLayoutFmt

  REPEAT:
    a non-negative integer indicating the number of times to run <REMOTE><BUTTON>
    sleeps ${repeatSleepMillis}ms between each

  SLEEP_MILLIS:
    a non-negative integer indicating the number of milliseconds to sleep

  OPTIONS:
    -c CHANNEL | --channel=CHANNEL | -c CHANNEL_HEX_SUM | --channel=CHANNEL_HEX_SUM
      override the default channel ($dir/names/<REMOTE>/channel-default)
        CHANNEL
          a single digit, one of: 1 2 3 4
        CHANNEL_HEX_SUM
          the sum of the channels desired as a hex digit
            0x01 = channel 1
            0x02 = channel 2
            0x04 = channel 3
            0x08 = channel 4
          e.g.: 0x07 = ch1 + ch2 + ch3
                0x0b = ch1 + ch2 + ch4
                0x0B = ch1 + ch2 + ch4

    -d DEVICE | --device=DEVICE
      override the default device ($dir/names/<REMOVE>/device-default)
      DEVICE
        -iguana internal device index (e.g.: 0) as returned by `igclient --all-devices`
        -custom named id (flashed to device with `igclient --set-id NAME`),
        -can NOT be usb bus index (the output of `igdaemon --devices` is useless)
";

sub main(@){
  if(@_ == 3 and $_[0] =~ /^--bash-complete$/ and $_[2] =~ /^\d+$/){
    print map {"$_\n"} bashComplete($_[1], $_[2]);
    exit 0;
  }

  my $channelOverride = undef;
  my $deviceOverride = undef;
  while(@_ > 0 and $_[0] =~ /^-/){
    my $arg = shift;
    if($arg =~ /^(-h|--help)$/){
      print $usage;
      exit 0;
    }elsif($arg =~ /^--channel=(.*)$/){
      $channelOverride = $1;
    }elsif($arg =~ /^-c$/ and @_ > 0){
      $channelOverride = shift;
    }elsif($arg =~ /^--device=(.*)$/){
      $deviceOverride = $1;
    }elsif($arg =~ /^-d$/ and @_ > 0){
      $deviceOverride = shift;
    }else{
      die $usage;
    }
  }

  die $usage if @_ == 0;

  my @igClientCmd = ($igclientExec);

  my @cmds = @_;
  for my $cmd(@_){
    if($cmd =~ /^($okRemoteNames)-(\w+)(?:-(\d+))?$/){
      my ($remoteName, $button, $repeat) = ($1, $2, $3);

      my $channel;
      if(defined $channelOverride){
        $channel = $channelOverride;
      }else{
        $channel = getDefaultChannel $remoteName;
      }
      $channel = formatChannelHexSum $channel;

      my $device;
      if(defined $deviceOverride){
        $device = $deviceOverride;
      }else{
        $device = getDefaultDevice $remoteName;
      }

      push @igClientCmd, "--set-channels=$channel";
      push @igClientCmd, "--device=$device";

      $repeat = 1 if not defined $repeat;
      my $okButtons = join "|", @{$buttons{$remoteName}};
      if($button !~ /^($okButtons)$/){
        die "$usage\nunknown button \"$button\" for remote \"$remoteName\"\n";
      }
      my $irCodeFile = "$dir/names/$remoteName/buttons/$button";
      die "missing IR code file: $irCodeFile\n" if not -f $irCodeFile;
      while($repeat-- > 0){
        push @igClientCmd, "--send=$irCodeFile";
        my $sleepFmt = sprintf "%.3f", $repeatSleepMillis/1000;
        @igClientCmd = (@igClientCmd, "--sleep", $sleepFmt) if $repeat > 0;
      }
    }elsif($cmd =~ /^sleep-(\d+)$/){
      my $sleepMillis = $1;
      my $sleepFmt = sprintf "%.3f", $sleepMillis/1000;
      @igClientCmd = (@igClientCmd, "--sleep", $sleepFmt);
    }else{
      die "$usage\ninvalid CMD: $cmd\n";
    }
  }

  run @igClientCmd;
}

sub getRemoteNames(){
  my @names = `ls $dir/names 2>/dev/null`;
  chomp foreach @names;
  @names = grep {/^\w+$/} @names;
  return @names;
}

sub getButtons($){
  my $name = shift;
  my @buttons = `ls $dir/names/$name/buttons 2>/dev/null`;
  chomp foreach @buttons;
  #ignore segmented IR codes
  @buttons = grep {$_ !~ /^\w+#\d+$/} @buttons;
  return @buttons;
}

sub getDefaultChannel($){
  my $name = shift;
  my $file = "$dir/names/$name/channel-default";
  if(not -f $file){
    die "could not find $file\n";
  }
  open FH, "< $file" or die "could not read $file\n$!\n";
  my $out = join '', <FH>;
  close FH;
  chomp $out;

  my $channel;
  if($out !~ /^(1|2|3|4|0x0[0-f])$/){
    die "invalid default channel for $name: $out\n";
  }else{
    $channel = $1;
  }
  return $channel;
}

sub getDefaultDevice($){
  my $name = shift;
  my $file = "$dir/names/$name/device-default";
  if(not -f $file){
    die "could not find $file\n";
  }
  open FH, "< $file" or die "could not read $file\n$!\n";
  my $out = join '', <FH>;
  close FH;
  chomp $out;

  return $out;
}

sub formatChannelHexSum($){
  my $channel = shift;
  if($channel =~ /^0x0[0-f]$/){
    return $channel;
  }elsif($channel == 1){
    return 0x01;
  }elsif($channel == 2){
    return 0x02;
  }elsif($channel == 3){
    return 0x04;
  }elsif($channel == 4){
    return 0x08;
  }else{
    die "invalid channel: $channel\n";
  }
}

sub formatLayout($){
  my $name = shift;
  my @lines = `cat $dir/names/$name/layout 2>/dev/null`;
  chomp foreach @lines;

  my $maxLen = 0;
  for my $line(@lines){
    if(length $line > $maxLen){
      $maxLen = length $line;
    }
  }
  my $nameLen = length $name;
  my $header = ""
    . "=" x int(($maxLen+2-($nameLen+2))/2+0.5)
    . "[$name]"
    . "=" x int(($maxLen+2-($nameLen+2))/2)
    ;

  my $footer = "=" x ($maxLen + 2);
  my $indent = "      ";

  my $fmt = '';
  $fmt .= "$indent$header\n";
  for my $line(@lines){
    my $space = " " x ($maxLen - length $line);
    $fmt .= "$indent|$line$space|\n";
  }
  $fmt .= "$indent$footer\n";
  return $fmt;
}

sub run(@){
  print "@_\n";
  system @_;
  die "\ncmd \"@_\" failed\n" if $? != 0;
}

sub bashComplete($$){
  my ($cmdLine, $pos) = @_;
  my $cmd = substr $cmdLine, 0, $pos;
  my $isNewWord = $cmd =~ /\s$/;
  $cmd =~ s/^\s+//;
  $cmd =~ s/\s+$//;

  my @words = split /\s+/, $cmd;
  shift @words;
  my $cur = pop @words if not $isNewWord;

  my @opts;
  my @args;
  while(@words > 0 and $words[0] =~ /^-/){
    push @opts, shift @words;
  }
  @args = @words;

  my @optCompletions = qw(--channel=0x01 --channel=0x04);

  my @complete;
  if(@args == 0){
    @complete = (@complete, @optCompletions);
  }

  my @cmdCompletions = qw(sleep-500 sleep-1000);
  for my $remoteName(@remoteNames){
    my @remoteButtons = @{$buttons{$remoteName}};
    for my $button(@remoteButtons){
      push @cmdCompletions, "$remoteName-$button";
    }
  }

  @complete = (@complete, @cmdCompletions);

  return @complete;
}

&main(@ARGV);

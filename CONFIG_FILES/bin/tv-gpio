#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(sleep);

my $stateFile = "$ENV{HOME}/tv-last-state";
my $readPin = 0; #BCM 17 => GPIO0 => wiringpi 0
my $writePin = 2; #BCM 21/27 => GPIO2 => wiringpi 2

my $delayMs = 500;
my $stateMismatchDelayMs = 3000;

my $usage = "Usage:
  $0 -h|--help
    show this message

  $0
  $0 push|toggle
    'push' the tv power button by using gpio
      -write 1 to wiringpi#$writePin
      -sleep $delayMs ms
      -write 0 to wiringpi#$writePin
      -toggles 'on' <=> 'off' for last intended state in $stateFile

  $0 get
    read the tv on/off pin
      -read wiringpi#$readPin
      -if pin is 1: print 'on' and exit with code 0
      -if pin is 0: print 'off' and exit with code 1

  $0 on
    do 'push' unless tv is already on
      -read wiringpi#$readPin
      -check to make sure pin matches last intended state in $stateFile
      -if state and pin mismatch: sleep ${stateMismatchDelayMs}ms and re-read pin
      -if pin is 1: exit with code 0
      -if pin is 0: do `$0 push` and store 'on' for last intended state in $stateFile

  $0 off
    do 'push' unless tv is already off
      -read wiringpi#$readPin
      -check to make sure pin matches last intended state in $stateFile
      -if state and pin mismatch: sleep ${stateMismatchDelayMs}ms and re-read pin
      -if pin is 0: exit with code 0
      -if pin is 1: do `$0 push` and store 'off' for last intended state in $stateFile
";

sub readPinUntilStateMatches();
sub get();
sub pushButton();
sub run(@);
sub readProc(@);
sub readLastState();
sub writeLastState($);

sub main(@){
  if(@_ == 1 and $_[0] =~ /^(-h|--help)$/){
    print $usage;
    exit 0;
  }elsif(@_ == 0 or (@_ == 1 and $_[0] =~ /^(push|toggle)$/)){
    pushButton();
    writeLastState(not readLastState());
  }elsif(@_ == 1 and $_[0] =~ /^(get)$/){
    my $isOn = get();
    print $isOn ? "on\n" : "off\n";
    exit $isOn ? 0 : 1;
  }elsif(@_ == 1 and $_[0] =~ /^(on)$/){
    my $isOn = readPinUntilStateMatches();
    if(not $isOn){
      pushButton();
      writeLastState(1);
    }else{
      print "skipping\n";
    }
  }elsif(@_ == 1 and $_[0] =~ /^(off)$/){
    my $isOn = readPinUntilStateMatches();
    if($isOn){
      pushButton();
      writeLastState(0);
    }else{
      print "skipping\n";
    }
  }else{
    die $usage;
  }
}

sub readPinUntilStateMatches(){
  my $isOn = get();
  my $wasOn = readLastState();
  if($isOn != $wasOn){
    print "state/pin mismatch: wait ${stateMismatchDelayMs}ms and recheck\n";
    sleep $stateMismatchDelayMs/1000.0;
    $isOn = get();
  }
  if($isOn != $wasOn){
    print STDERR "\n\nWARNING: on/off pin says '$isOn', but last state was '$wasOn'\n";
  }
  return $isOn;
}

sub get(){
  run "gpio", "mode", $readPin, "in";
  my $status = readProc "gpio", "read", $readPin;
  chomp $status;
  die "ERROR: gpio read fail\n" if $status !~ /^(0|1)$/;
  return $status;
}

sub pushButton(){
  run "gpio", "mode", $writePin, "out";
  run "gpio", "write", $writePin, "1";
  print "sleeping for $delayMs ms\n";
  sleep $delayMs/1000.0;
  run "gpio", "write", $writePin, "0";
}

sub run(@){
  print "@_\n";
  system @_;
}

sub readProc(@){
  print "@_\n";
  return `@_`;
}

sub readLastState(){
  return 0 if not -f $stateFile;
  open FH, "< $stateFile" or die "Could not read $stateFile\n";
  my $state = <FH>;
  close FH;
  return $state =~ /^on/ ? 1 : 0;
}
sub writeLastState($){
  my $state = shift;
  open FH, "> $stateFile" or die "Could not write to $stateFile\n";
  print FH $state ? "on\n" : "off\n";
  close FH;
}
&main(@ARGV);

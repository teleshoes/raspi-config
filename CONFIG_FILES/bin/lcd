#!/usr/bin/python
#Copyright 2013,2014 Elliot Wolk

import RPi.GPIO as GPIO
from RPLCD import CharLCD, cursor
import csv
import sys
import time
import getpass
import StringIO
from subprocess import call

CONFIG = { 'COLS':     20     #length of the lines
         , 'ROWS':     4      #number of lines
         , 'PAGE':     None   #pagination of lines
         , 'PIN_RS':   2
         , 'PIN_E':    3
         , 'PIN_DATA': [14, 15, 18, 23, 24, 25, 8, 7]
         , 'PIN_LED':  4
       }
GPIO_MODE = GPIO.BCM

def ensureRoot():
  if getpass.getuser() != 'root':
    print "rerunning as root..\n"
    cmd = ["sudo"] + sys.argv
    sys.exit(call(cmd))

def main(args):
  if len(args) >= 1 and (args[0] == '-h' or args[0] == '--help'):
    die()

  ensureRoot()

  if len(args) >= 2 and args[0] == '-e':
    try:
      CONFIG['PIN_E'] = int(args[1])
      args = args[2:]
    except:
      die()

  if len(args) == 1 and args[0] == '--stdin':
    lcd = createLCD()
    while True:
      inputLine = sys.stdin.readline()
      if not inputLine:
        break
      (page, lines) = parseInputLine(inputLine)
      if lines == None:
        print >> sys.stderr, "Malformed input line: " + inputLine
        continue
      CONFIG['PAGE'] = page
      setText(lcd, lines)
    sys.exit(0)

  if len(args) >= 2 and args[0] == '--page':
    try:
      CONFIG['PAGE'] = int(args[1])
      args = args[2:]
    except:
      die()

  if len(args) == 1 and args[0] == '--off':
    ledToggle(False)
  elif len(args) == 1 and args[0] == '--on':
    ledToggle(True)
  elif len(args) == 1 and args[0] == '--blink':
    ledBlink(3, 0.1)
  elif len(args) >= 1:
    lcd = createLCD()
    setText(lcd, args)
  else:
    die()

def die():
  print >> sys.stderr, ("Usage:\n"
    + "  [-e E-PIN] [--page PAGE] LINE [LINE LINE LINE ..]\n"
    + "    set LCD text\n"
    + "  [-e E-PIN] --stdin\n"
    + "    read from stdin. each line is a csv row, formatted like this:\n"
    + "        PAGE,LINE,LINE,...LINE\n"
    + "          the delimiter is: ,\n"
    + "          the quote symbol is: \"\n"
    + "          quote literals are: \"\"\n"
    + "  [--on | --off]\n"
    + "    turn LED backlight on/off\n"
    + "  --blink\n"
    + "    blink LED backlight, preserving initial backlight\n"
    + "\n"
    + "  E-PIN: GPIO BCM pin for the LCD enable pin\n"
    + "  PAGE: split LINEs into pages and display the indicated page\n"
    + "        the same page is displayed for each line:\n"
    + "          if one line has fewer pages than another line,\n"
    + "          and the selected page is after the last page,\n"
    + "          the FIRST page for that line is selected\n"
    + "        pages are zero-indexed, and modular:\n"
    + "          if there are 3 pages, p0 and p3 are both the first page,\n"
    + "          and p2 and p5 are both the last page\n"
    + "        if page is specified, ~ is prepended/appended to the page\n"
    + "          if there are additional pages before/after it\n"
    + "        the page width is " + str(CONFIG['COLS']) + "\n"
    )
  sys.exit(1)

def parseInputLine(inputLine):
  f = StringIO.StringIO(inputLine)
  try:
    rows = list(csv.reader(f, delimiter=','))
  except:
    return (None, None)
  if len(rows) != 1:
    return (None, None)

  cols = rows[0]
  if len(cols) < 2:
    return (None, None)
  page = cols[0]
  lines = cols[1:]
  if not page.isdigit():
    return (None, None)
  return (int(page), lines)

def createLCD():
  return CharLCD(
    pin_rs=CONFIG['PIN_RS'],
    pin_e=CONFIG['PIN_E'],
    pins_data=CONFIG['PIN_DATA'],
    numbering_mode=GPIO_MODE,
    cols=CONFIG['COLS'],
    rows=CONFIG['ROWS']
  )

def ledBlink(count, delay):
  status = ledRead()
  for i in range(count):
    ledToggle(not status)
    time.sleep(delay)
    ledToggle(status)
    time.sleep(delay)

def ledToggle(on):
  GPIO.setmode(GPIO_MODE)
  GPIO.setup(CONFIG['PIN_LED'], GPIO.OUT)
  GPIO.output(CONFIG['PIN_LED'], on)

def ledRead():
  return not GPIO.input(CONFIG['PIN_LED'])

def setText(lcd, lines):
  if CONFIG['PAGE'] != None:
    lines = paginate(lines, CONFIG['PAGE'])

  lines = map(trimLine, lines)
  lcd.write_string(''.join(lines))

def getPages(line):
  remLen = len(line)
  pages = []
  pos = 0

  w = CONFIG['COLS']

  if 0 < remLen and remLen <= w:
    pages.append(line[pos : pos+w])
    pos += w
    remLen -= w
  elif remLen > w:
    pages.append(line[pos : pos+w-1] + "~")
    pos += w-1
    remLen -= w-1

  while remLen > 0:
    if 0 < remLen and remLen <= w-1:
      pages.append("~" + line[pos : pos+w-1])
      pos += w-1
      remLen -= w-1
    elif remLen > w-1:
      pages.append("~" + line[pos : pos+w-2] + "~")
      pos += w-2
      remLen -= w-2

  if len(pages) == 0:
    pages.append("")

  return pages

def trimLine(line):
  return line.ljust(CONFIG['COLS'])[:CONFIG['COLS']]

def paginate(lines, page):
  linePages = map(getPages, lines)
  maxPages = max(map(len, linePages))

  page %= maxPages

  selectedPages = []
  for pages in linePages:
    if page < len(pages):
      selectedPages.append(pages[page])
    else:
      selectedPages.append(pages[0])

  return selectedPages

if __name__ == '__main__':
  main(sys.argv[1:])


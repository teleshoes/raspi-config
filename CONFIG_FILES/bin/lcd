#!/usr/bin/python
#Copyright 2013 Elliot Wolk
# based on:
#
# HD44780 LCD Test Script for
# Raspberry Pi
#
# Author : Matt Hawkins
# Site   : http://www.raspberrypi-spy.co.uk
#
# Date   : 03/08/2012
#

# The wiring for the LCD is as follows:
# 1 : GND
# 2 : 5V
# 3 : Contrast (0-5V)*
# 4 : RS (Register Select)
# 5 : R/W (Read Write)       - GROUND THIS PIN
# 6 : Enable or Strobe
# 7 : Data Bit 0             - NOT USED
# 8 : Data Bit 1             - NOT USED
# 9 : Data Bit 2             - NOT USED
# 10: Data Bit 3             - NOT USED
# 11: Data Bit 4
# 12: Data Bit 5
# 13: Data Bit 6
# 14: Data Bit 7
# 15: LCD Backlight +5V**
# 16: LCD Backlight GND

#import
import RPi.GPIO as GPIO
import sys
import time
import getpass
from subprocess import call

# Define GPIO to LCD mapping
PINS = { 'RS':  7
       , 'E':   8
       , 'D4':  25
       , 'D5':  24
       , 'D6':  23
       , 'D7':  18
       , 'LED': 15
       }

LCD_CHR = True
LCD_CMD = False

LCD_LINE_1 = 0x80 # LCD RAM address for the 1st line
LCD_LINE_2 = 0xC0 # LCD RAM address for the 2nd line

E_PULSE = 0.001

def ensureRoot():
  if getpass.getuser() != 'root':
    print "rerunning as root..\n"
    cmd = ["sudo"] + sys.argv
    sys.exit(call(cmd))

def main(args):
  ensureRoot()

  if len(args) == 1 and (args[0] == 'off' or args[0] == 'on'):
    initGPIO()
    GPIO.output(PINS['LED'], args[0] != 'on')
    sys.exit(0)

  if len(args) != 2 and len(args) != 3:
    print "Usage: TOP BOTTOM [E-PIN] | on | off\n"
    sys.exit(1)
  if len(args) == 3:
    PINS['E'] = int(args[2])

  initGPIO()
  setText(args[0], args[1])

def initGPIO():
  GPIO.setmode(GPIO.BCM)       # Use BCM GPIO numbers
  for pin in PINS.values():
    GPIO.setup(pin, GPIO.OUT)

def setText(top, bot):
  lcd_init()

  lcd_byte(LCD_LINE_1, LCD_CMD)
  lcd_string(top)
  lcd_byte(LCD_LINE_2, LCD_CMD)
  lcd_string(bot)

def lcd_init():
  # Initialise display
  lcd_byte(0x33,LCD_CMD)
  lcd_byte(0x32,LCD_CMD)
  lcd_byte(0x28,LCD_CMD)
  lcd_byte(0x0C,LCD_CMD)
  lcd_byte(0x06,LCD_CMD)
  lcd_byte(0x01,LCD_CMD)
def lcd_string(message):
  for c in message:
    lcd_byte(ord(c),LCD_CHR)


def lcd_byte(bits, mode):

  GPIO.output(PINS['RS'], mode) # RS

  # High bits
  GPIO.output(PINS['D4'], bits&0x10)
  GPIO.output(PINS['D5'], bits&0x20)
  GPIO.output(PINS['D6'], bits&0x40)
  GPIO.output(PINS['D7'], bits&0x80)

  toggleEnable()

  # Low bits
  GPIO.output(PINS['D4'], bits&0x01)
  GPIO.output(PINS['D5'], bits&0x02)
  GPIO.output(PINS['D6'], bits&0x04)
  GPIO.output(PINS['D7'], bits&0x08)

  toggleEnable()

def toggleEnable():
  GPIO.output(PINS['E'], True)
  time.sleep(E_PULSE)
  GPIO.output(PINS['E'], False)

if __name__ == '__main__':
  main(sys.argv[1:])


#!/usr/bin/env python

import urllib2, base64, time, socket, struct, sys, re
try:
  import json
except ImportError:
  import simplejson as json

usage = ("""Usage: %s CMD VAL
  playpause|play|pause
    play/pause
  stop
    stop
  seek VAL
    seek VAL, e.g.:
      10      =>  seek forward 10s
      +10     =>  seek forward 10s
      -10     =>  seek backward 10s
      10%%     =>  seek forward by 10%% of the total time
      -10%%    =>  seek backward by 10%% of the total time
      0:30    =>  seek exactly to 30s
      2:30    =>  seek exactly to 2m30s
      1:05:30 =>  seek exactly to 1h5m30s
  fullscreen
    fullscreen
  addon ADDONID
    execute ADDONID
  notify TITLE MESSAGE
""")

settings = {
  'hostname': '127.0.0.1',
  'port': '80',
  'username': '',
  'password': '',
  'mac_address': 'B8:27:EB:87:B8:A1'
}
http_address = 'http://%s:%s/jsonrpc' % (settings['hostname'], settings['port'])
username = settings['username']
password = settings['password']



def main():
  xbmc = XBMCJSON(http_address)
  cmd = ""
  argc = len(sys.argv)
  if argc == 1:
    cmd = "playpause"
  elif argc >= 2:
    cmd = sys.argv[1]

  playerId=1
  if (cmd == "playpause" or cmd == "play" or cmd == "pause") and argc == 2:
    xbmc.Player.PlayPause(playerid=playerId)
  elif cmd == "stop" and argc == 2:
    xbmc.Player.Stop(playerid=playerId)
  elif cmd == "seek" and argc == 3:
    seekArg = sys.argv[2]
    pos = xbmc.Player.GetProperties(playerid=playerId,
      properties=['time', 'totaltime'])
    cur = timeToSex(pos['time'])
    total = timeToSex(pos['totaltime'])
    val = seekAbs(seekArg)
    if val == None:
      val = seekRel(seekArg, total)
      if val != None:
        val += cur

    if val == None:
      print usage % (sys.argv[0])
    else:
      newPer = val / total * 100
      xbmc.Player.Seek(playerid=playerId, value=newPer)
  elif cmd == "fullscreen" and argc == 2:
    xbmc.Gui.SetFullscreen(fullscreen=True)
  elif cmd == "addon" and argc == 3:
    xbmc.Addons.ExecuteAddon(addonid=sys.argv[2])
  elif cmd == "notify" and argc == 4:
    title = sys.argv[2]
    msg = sys.argv[3]
    xbmc.Gui.ShowNotification(title=title, message=msg)
  else:
    print usage % (sys.argv[0])

def seekAbs(s):
  m = re.match('^(?:([0-9]+):)?(?:([0-9]+):)(?:([0-9]+))$', s)
  if m == None:
    return None

  hh = m.group(1)
  if hh == None:
    hh = "0"

  mm = m.group(2)
  ss = m.group(3)
  return int(hh)*60*60 + int(mm)*60 + int(ss)

def seekRel(s, total):
  m = re.match('^(\\+|-)?([0-9]+)(%)?$', s)
  if m == None:
    return None
  val = int(m.group(2))

  if m.group(1) == "-":
    val = 0 - val

  if m.group(3) == "%":
    val = float(val)/100 * total

  return val


def timeToSex(t):
  return (
    float(t['hours']*60*60) +
    float(t['minutes']*60) +
    float(t['seconds']) +
    float(t['milliseconds']/1000))

class XBMCJSON:
  def __init__(self, server):
    self.server = server
    self.version = '2.0'

  def __call__(self, **kwargs):
    method = '.'.join(map(str, self.n))
    self.n = []
    return XBMCJSON.__dict__['Request'](self, method, kwargs)

  def __getattr__(self,name):
    if not self.__dict__.has_key('n'):
      self.n=[]
    self.n.append(name)
    return self

  def Request(self, method, kwargs):
    data = [{}]
    data[0]['method'] = method
    data[0]['params'] = kwargs
    data[0]['jsonrpc'] = self.version
    data[0]['id'] = 1

    data = json.JSONEncoder().encode(data)
    content_length = len(data)

    content = {
      'Content-Type': 'application/json',
      'Content-Length': content_length,
    }

    request = urllib2.Request(self.server, data, content)
    base64string = base64.encodestring('%s:%s' % (username, password)).replace('\n', '')
    request.add_header("Authorization", "Basic %s" % base64string)

    f = urllib2.urlopen(request)
    response = f.read()
    f.close()
    response = json.JSONDecoder().decode(response)

    try:
      return response[0]['result']
    except:
      return response[0]['error']

if __name__ == "__main__":
  sys.exit(main())

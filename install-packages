#!/usr/bin/perl
use strict;
use warnings;

sub runRemote(@);

my $IPMAGIC_NAME = "raspi";

my @PKG_REMOVALS = (
  "libtag1-rusxmms",
  "wolfram-engine",  #deps: libxcb-cursor0 pi-language-support
  "pi-wiz",
);

my %PKG_INSTALLS = (
  '1' => [qw(
    vim rsync wget git openvpn screen
  )],
  '2' => [qw(
    libterm-readkey-perl libtext-csv-perl libts0
    cmake
  )],
  '3' => [qw(
    x11vnc lsof psmisc zip unzip parted
    fonts-droid-fallback fonts-vlgothic
    fonts-opensymbol fonts-liberation fonts-linuxlibertine
    fonts-sil-gentium fonts-sil-gentium-basic
    fonts-inconsolata
  )],
  '4' => [qw(
    xinit time streamer
  )],
  '5' => [qw(
    mplayer mpv man python3-pip alsa-utils xdotool unclutter xscreensaver
  )],
  '6' => [qw(
    libcec6 libcec-dev
  )],
);

my @PKG_GROUPS = sort keys %PKG_INSTALLS;
my %PKG_ALIAS_BY_GROUP = map {$_ => substr($_, 0, 1)} @PKG_GROUPS;
my %PKG_GROUP_BY_ALIAS = map {$PKG_ALIAS_BY_GROUP{$_} => $_} @PKG_GROUPS;
die "ERROR: duplicate pkg group name alias\n" if %PKG_ALIAS_BY_GROUP != %PKG_GROUP_BY_ALIAS;

my $CMD_UPDATE = "update";
my $CMD_UPGRADE = "upgrade";
my $CMD_INSTALLS = "installs";
my $CMD_REMOVALS = "removals";

my @ALL_CMDS = ($CMD_UPDATE, $CMD_UPGRADE, $CMD_INSTALLS, $CMD_REMOVALS);

my $USAGE = "Usage:
  $0 -h|--help
    show this message

  $0 [CMD CMD ..]
    install/remove packages
      -run each CMD given
      -if none given, run: $0 @ALL_CMDS

  CMD
    update
      run `apt update`
    upgrade
      run `apt upgrade`
    installs
      run `apt install` packages in all groups"
    . join("", map {"\n    $_ | $PKG_ALIAS_BY_GROUP{$_}
      `apt install` packages in group $_"
    } @PKG_GROUPS) . "
    remove | removals
      `apt remove` packages in removals
";

sub main(@){
  my @cmds;
  while(@_ > 0){
    my $arg = shift;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(update)$/){
      push @cmds, $CMD_UPDATE;
    }elsif($arg =~ /^(upgrade)$/){
      push @cmds, $CMD_UPGRADE;
    }elsif($arg =~ /^(installs)$/){
      push @cmds, $CMD_INSTALLS;
    }elsif(defined $PKG_INSTALLS{$arg}){
      push @cmds, $arg;
    }elsif(defined $PKG_GROUP_BY_ALIAS{$arg}){
      push @cmds, $PKG_GROUP_BY_ALIAS{$arg};
    }elsif($arg =~ /^(remove|removals)$/){
      push @cmds, $CMD_REMOVALS;
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  @cmds = (@ALL_CMDS) if @cmds == 0;
  #expand 'installs' to all groups
  @cmds = map {$_ eq $CMD_INSTALLS ? @PKG_GROUPS : $_} @cmds;

  print "running commands: @cmds\n";

  for my $cmd(@cmds){
    if($cmd eq $CMD_UPDATE){
      runRemote("apt update -y");
    }elsif($cmd eq $CMD_UPGRADE){
      runRemote("apt upgrade -y");
    }elsif(defined $PKG_INSTALLS{$cmd}){
      my $pkgGroup = $cmd;
      my @packages = @{$PKG_INSTALLS{$pkgGroup}};
      print "\n\nInstalling group[$pkgGroup]:\n----\n@packages\n----\n";
      runRemote ''
        . "yes |"
        . " apt-get install"
        . " -y --allow-unauthenticated"
        . " @packages";
    }elsif($cmd eq $CMD_REMOVALS){
      runRemote("apt remove -y @PKG_REMOVALS");
    }else{
      die "ERROR: unknown cmd $cmd\n";
    }
  }
}

sub runRemote(@){
  my @cmd = ("ipmagic", $IPMAGIC_NAME, "-u", "root", @_);
  system @cmd;
  die "error running '@cmd'\n" if $? != 0;
}

&main(@ARGV);
